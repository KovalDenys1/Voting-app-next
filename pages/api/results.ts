import type { NextApiRequest, NextApiResponse } from "next";
import { prisma } from "@/lib/prisma";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—Ç–∏–∏
    const parties = await prisma.party.findMany();

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏
    const voteCounts = await prisma.vote.groupBy({
      by: ["partyId"],
      _count: {
        partyId: true,
      },
    });

    // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É partyId => –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
    const countMap = new Map<string, number>(
      voteCounts.map(vc => [vc.partyId, vc._count.partyId])
    );

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const results = parties
      .map(party => ({
        party: { name: party.name },
        count: countMap.get(party.id) || 0,
      }))
      .sort((a, b) => b.count - a.count); // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≥–æ–ª–æ—Å–æ–≤

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return res.status(200).json({ results });

  } catch (error: unknown) {
    const err = error as Error;
    console.error("üí• Error in /api/results:", err);
    return res.status(500).json({
      message: "Internal server error",
      error: err.message,
    });
  }
}